@page "/"
@using MinToDo.Services;
@inject IToDoService _todoService;

<PageTitle>To Do List</PageTitle>

<div class="border" style="padding: 20px;">
	<h4>To Do List</h4>
	<ToDoItemForm OnItemAdded="@ItemsChanged" />
</div>

<div class="border" style="padding: 20px; margin-top: 20px;">
	<div style="display: flex; flex-direction: column">
		@foreach (var todo in Todos)
		{
			<div style="display: flex; margin: 10px;">
				<div style="display: flex; align-items: center; margin-bottom: 10px;">
				<div class="@ItemClass(todo)" style="width: 200px;">@todo.Text</div>
			</div>
			@if (todo.Completed)
				{
					<div style="width: 120px">
						<button class="btn btn-primary" onclick="@(() => UncompleteItem(todo))">Uncomplete</button>
					</div>
				}
			@if (!todo.Completed)
				{
					<div style="width: 120px">
						<button class="btn btn-primary" onclick="@(() => CompleteItem(todo))">Complete</button>
					</div>
				}
				<div>
				<button class="btn btn-danger" onclick="@(() => RemoveItem(todo))">Delete</button>
			</div>
			</div>
		}
	</div>
</div>

@code {
	private IList<ToDoItem> Todos { get; set; } = new List<ToDoItem>();
	protected override void OnInitialized()
	{
		Todos = _todoService.GetAll().ToList();
	}

	public string ItemClass(ToDoItem item)
	{
		return item.Completed ? "item-completed" : "";
	}

	public void ItemsChanged()
	{
		Todos = _todoService.GetAll().ToList();
		StateHasChanged();
	}

	public void RemoveItem(ToDoItem item)
	{
		_todoService.Remove(item);
		ItemsChanged();
	}

	public void CompleteItem(ToDoItem item)
	{
		_todoService.Complete(item);
		ItemsChanged();
	}

	public void UncompleteItem(ToDoItem item)
	{
		_todoService.Uncomplete(item);
		ItemsChanged();
	}
}
